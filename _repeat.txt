# -*- mode: python -*-
# (c) Copyright 2015 by James Stout
# Licensed under the LGPL, see <http://www.gnu.org/licenses/>

#---------------------------------------------------------------------------
# Here we define various functions for formatting text.
# Each of these functions must have a docstring which defines its
#  spoken-form.  This docstring must include the "<dictation>" extra.
#  See below for various examples.

import re

def process(dictation):
    """Preprocess dictation to do a better job of word separation. Returns a list of
    words."""
    deleted_char = r"(?<=[A-z0-9.])[^A-z0-9.]|[^A-z0-9.](?=[A-z0-9.])"
    raw_words = [word for word
                 in re.sub(deleted_char, " ", str(dictation)).lower().split(" ")
                 if len(word) > 0]
    words = []
    previous_letter = False
    previous_symbol = False
    symbol_char = r"[^A-z0-9]"
    for word in raw_words:
        current_symbol = re.match(symbol_char, word)
        current_letter = len(word) == 1 and not re.match(symbol_char, word)
        if len(words) == 0:
            words.append(word)
        else:
            if current_symbol or previous_symbol or (current_letter and previous_letter):
                words.append(words.pop() + word)
            else:
                words.append(word)
        previous_letter = current_letter
        previous_symbol = current_symbol
    return words
    

# Format: some_words
def format_score(dictation):          # Function name must start with "format_".
    """ score <dictation> """         # Docstring defining spoken-form.
    return "_".join(process(dictation))  # Put underscores between words.

# Format: some_words_
def format_field(dictation):
    """ field <dictation> """
    return "_".join(process(dictation)) + "_"

# Format: some_words()
def format_under_function(dictation):
    """ under func <dictation> """
    return "_".join(process(dictation)) + "()"

# Format: SomeWords
def format_studley(dictation):
    """ studley <dictation> """
    words = [word.capitalize() for words in process(dictation)
             for word in re.findall(r"(\W+|\w+)", words)]
    return "".join(words)

# Format: somewords
def format_one_word(dictation):
    """ [all] one word <dictation> """
    return "".join(process(dictation))

# Format: SOMEWORDS
def format_upper_one_word(dictation):
    """ upper one word <dictation> """
    words = [word.upper() for word in process(dictation)]
    return "".join(words)

# Format: SOME_WORDS
def format_upper_score(dictation):
    """ upper score <dictation> """
    words = [word.upper() for word in process(dictation)]
    return "_".join(words)

# Format: someWords
def format_java_method(dictation):
    """ camel <dictation> """
    words = process(dictation)
    return words[0] + "".join(w.capitalize() for w in words[1:])

# Format: some-words
def format_dashes(dictation):
    """ dashes <dictation> """
    return "-".join(process(dictation))

# Format: some words
def format_spaces(dictation):
    """ spaces <dictation> """
    return " ".join(process(dictation))

